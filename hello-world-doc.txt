Step 1: Create the VPC using Terraform
Create a vpc.tf file:

hcl
Copy code
provider "aws" {
  region = "us-west-2"
}

resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "main-vpc"
  }
}

resource "aws_subnet" "subnet" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-west-2a"

  tags = {
    Name = "main-subnet"
  }
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "main-igw"
  }
}

resource "aws_route_table" "routetable" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "main-routetable"
  }
}

resource "aws_route_table_association" "rta" {
  subnet_id      = aws_subnet.subnet.id
  route_table_id = aws_route_table.routetable.id
}

output "vpc_id" {
  value = aws_vpc.main.id
}

output "subnet_id" {
  value = aws_subnet.subnet.id
}
Step 2: Create an EC2 Instance for Jenkins using Terraform
Create a jenkins_ec2.tf file:

hcl
Copy code
resource "aws_instance" "jenkins" {
  ami           = "ami-0c55b159cbfafe1f0" # Ubuntu 20.04 LTS
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.subnet.id

  tags = {
    Name = "jenkins-server"
  }

  user_data = <<-EOF
              #!/bin/bash
              sudo apt update
              sudo apt install -y openjdk-11-jdk
              wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
              sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
              sudo apt update
              sudo apt install -y jenkins
              sudo systemctl start jenkins
              sudo systemctl enable jenkins
              EOF
}

output "jenkins_public_ip" {
  value = aws_instance.jenkins.public_ip
}
Step 3: Install Docker on the Jenkins EC2 Instance
SSH into the Jenkins EC2 instance:

sh
Copy code
ssh -i your-key.pem ubuntu@<jenkins_public_ip>
Install Docker:

sh
Copy code
sudo apt update
sudo apt install -y docker.io
sudo usermod -aG docker jenkins
sudo systemctl enable docker
sudo systemctl start docker
Step 4: Create and Push the Docker Image
Create a Dockerfile for the Hello World API:

Dockerfile
Copy code
FROM ubuntu:latest

RUN apt-get update && apt-get install -y nginx

COPY index.html /var/www/html/index.html

CMD ["nginx", "-g", "daemon off;"]
Create index.html file:

html
Copy code
<!DOCTYPE html>
<html>
<head>
    <title>Hello World</title>
</head>
<body>
    <h1>Hello World from NGINX!</h1>
</body>
</html>
Build and push the Docker image:

sh
Copy code
docker build -t your-username/hello-world:latest .
docker login
docker push your-username/hello-world:latest
Step 5: Deploy to AWS Fargate using Terraform
Create a fargate.tf file:

hcl
Copy code
resource "aws_ecs_cluster" "main" {
  name = "main-cluster"
}

resource "aws_ecs_task_definition" "hello_world" {
  family                   = "hello_world"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = "256"
  memory                   = "512"

  container_definitions = jsonencode([{
    name      = "hello_world"
    image     = "your-username/hello-world:latest"
    essential = true
    portMappings = [{
      containerPort = 80
      hostPort      = 80
    }]
  }])

  execution_role_arn = aws_iam_role.ecs_task_execution_role.arn
}

resource "aws_iam_role" "ecs_task_execution_role" {
  name = "ecsTaskExecutionRole"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ecs-tasks.amazonaws.com"
      }
    }]
  })

  managed_policy_arns = [
    "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
  ]
}

resource "aws_ecs_service" "hello_world" {
  name            = "hello_world"
  cluster         = aws_ecs_cluster.main.id
  task_definition = aws_ecs_task_definition.hello_world.arn
  desired_count   = 1
  launch_type     = "FARGATE"

  network_configuration {
    subnets         = [aws_subnet.subnet.id]
    security_groups = [aws_security_group.allow_http.id]
  }
}

resource "aws_security_group" "allow_http" {
  name        = "allow_http"
  description = "Allow HTTP inbound traffic"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_http"
  }
}

output "ecs_cluster_id" {
  value = aws_ecs_cluster.main.id
}

output "ecs_service_name" {
  value = aws_ecs_service.hello_world.name
}
Step 6: Initialize and Apply Terraform
Initialize Terraform:

sh
Copy code
terraform init
Apply Terraform configurations:

sh
Copy code
terraform apply
Step 7: Create a Jenkins Pipeline
Open Jenkins:
Access Jenkins at http://<jenkins_public_ip>:8080.

Install Plugins:
Install the following plugins: Docker Pipeline, Amazon EC2, and Pipeline: AWS Steps.

Create a New Pipeline Job:

Go to Jenkins Dashboard
Click on "New Item"
Select "Pipeline" and give it a name
Configure the Pipeline:
Add the following pipeline script to automate the build, push, and deploy process:

groovy
Copy code
pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'your-username/hello-world'
        AWS_REGION = 'us-west-2'
        AWS_ECS_CLUSTER = 'main-cluster'
        AWS_ECS_SERVICE = 'hello_world'
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${env.DOCKER_HUB_REPO}:${env.BUILD_NUMBER}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        dockerImage.push("${env.BUILD_NUMBER}")
                        dockerImage.push("latest")
                    }
                }
            }
        }

        stage('Deploy to AWS Fargate') {
            steps {
                script {
                    sh '''
                    aws ecs update-service \
                        --cluster ${AWS_ECS_CLUSTER} \
                        --service ${AWS_ECS_SERVICE} \
                        --force-new-deployment \
                        --region ${AWS_REGION}
                    '''
                }
            }
        }
    }
}
Step 8: Configure Credentials
Docker Hub Credentials:

Go to Jenkins Dashboard -> Manage Jenkins -> Manage Credentials
Add a new credential with your Docker Hub username and password, and ID docker-hub-credentials
AWS Credentials:

Add your AWS credentials similarly under Jenkins credentials.
Summary
This setup includes:

Creating a VPC using Terraform.
Setting up an EC2 instance for Jenkins using Terraform.
Installing Docker on the Jenkins EC2 instance.
Creating and pushing a Docker image.
Deploying the Docker image